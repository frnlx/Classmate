{
	// Place your ThesisAdeKelas workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  "layout.tsx Template": {
    "description": "Initializes New Layout Boilerplate for Next.js App Dir",
    "prefix": "nlay",
    "body": [
      "import { LayoutProps } from \"@/types/next\"",
      "",
      "export default async function ${1:New}Layout({ children, params }: LayoutProps) {",
      "  return (",
      "    <>",
      "      {children}",
      "    </>",
      "  )",
      "}",
      "// https://nextjs.org/docs/app/api-reference/file-conventions/layout"
    ],
    "scope": "typescriptreact",
    "isFileTemplate": true,
  },

  "page.tsx Template": {
    "description": "Initializes New Page Boilerplate for Next.js App Dir",
    "prefix": "npage",
    "body": [
      "import { PageProps } from \"@/types/next\"",
      "",
      "export default async function ${1:New}Page({ params, searchParams }: PageProps) {",
      "  return (",
      "    <>${1:New}Page</>",
      "  )",
      "}",
      "// https://nextjs.org/docs/app/api-reference/file-conventions/page"
    ],
    "scope": "typescriptreact",
    "isFileTemplate": true,
  },

  "error.tsx Template": {
    "description": "Initializes New Error Boilerplate for Next.js App Dir",
    "prefix": "nerror",
    "body": [
      "'use client'; // Error components must be Client Components",
      "import { ErrorProps } from \"@/types/next\"",
      "",
      "export default function ${1:New}ErrorPage({ params, searchParams }: PageProps) {",
      "  useEffect(() => {",
      "    console.error(error);",
      "  }, [error]);",
      "",
      "  return (",
      "    <div>",
      "      <h2>",
      "        <button onClick={ () => reset() }>",
      "        </button>",
      "      </h2>",
      "    </div>",
      "  )",
      "}",
      "// https://nextjs.org/docs/app/api-reference/file-conventions/error"
    ],
    "scope": "typescriptreact",
    "isFileTemplate": true,
  },

  "loading.tsx Template": {
    "description": "Initializes New Loading Page Boilerplate for Next.js App Dir",
    "prefix": "nloading",
    "body": [
      "",
      "export default function ${1:New}LoadingPage() {",
      "",
      "  return (",
      "    <div>",
      "      Loading...",
      "    </div>",
      "  )",
      "}",
      "// https://nextjs.org/docs/app/api-reference/file-conventions/loading"
    ],
    "scope": "typescriptreact",
    "isFileTemplate": true,
  },

  "not-found.tsx Template": {
    "description": "Initializes New Not Found Page Boilerplate for Next.js App Dir",
    "prefix": "nnotfound",
    "body": [
      "",
      "export default function ${1:New}NotFoundPage() {",
      "",
      "  return (",
      "    <div>",
      "      ${1:New} Page: Not Found...",
      "    </div>",
      "  )",
      "}",
      "// https://nextjs.org/docs/app/api-reference/file-conventions/not-found"
    ],
    "scope": "typescriptreact",
    "isFileTemplate": true,
  },
}